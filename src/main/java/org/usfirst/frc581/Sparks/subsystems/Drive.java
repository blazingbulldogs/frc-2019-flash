// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc581.Sparks.subsystems;


import org.usfirst.frc581.Sparks.Robot;
import org.usfirst.frc581.Sparks.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark spark1;
    private Spark spark2;
    private Spark spark3;
    private Spark spark4;
    private MecanumDrive mecanumDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        spark1 = new Spark(1);
        addChild("spark1",spark1);
        spark1.setInverted(false);
        
        spark2 = new Spark(2);
        addChild("spark2",spark2);
        spark2.setInverted(false);
        
        spark3 = new Spark(3);
        addChild("spark3",spark3);
        spark3.setInverted(false);
        
        spark4 = new Spark(4);
        addChild("spark4",spark4);
        spark4.setInverted(false);
        
        mecanumDrive1 = new MecanumDrive(spark1, spark2,
              spark3, spark4);
        addChild("Mecanum Drive 1",mecanumDrive1);
        mecanumDrive1.setSafetyEnabled(true);
        mecanumDrive1.setExpiration(0.1);
        mecanumDrive1.setMaxOutput(1.0);

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveByJoystick());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // private boolean zero = true;

    public void setXboxController(XboxController xbox) {
        // if(xbox.getAButton()) {
            // zero = false;
            // Robot.sensors.zeroYaw();
        // } else if (xbox.getBButton()) {
        //     zero = true;
        // } else {
            double x = xbox.getRawAxis(0);
            double y = -xbox.getRawAxis(1);
            // double z = xbox.getRawAxis(3)-xbox.getRawAxis(2);
            double z = xbox.getRawAxis(4);
            // double g = -(zero?0:Robot.sensors.getAngle());
            mecanumDrive1.driveCartesian(x, y, z, 0);
        // }
    }

    public void stop() {
        mecanumDrive1.driveCartesian(0, 0, 0);
    }

}

